import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

const url = 'https://jsonplaceholder.typicode.com/todos';

const Menu = () => {
  const [todos, setTodos] = useState([]);
  const [filteredTodos, setFilteredTodos] = useState([]);
  const [selectedOption, setSelectedOption] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch(url);
      const data = await response.json();
      setTodos(data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const displayTodos = (option) => {
    switch (option) {
      case '1':
        setFilteredTodos(todos.map(todo => ({ id: todo.id })));
        break;
      case '2':
        setFilteredTodos(todos.map(todo => ({ id: todo.id, title: todo.title })));
        break;
      case '3':
        setFilteredTodos(todos.filter(todo => !todo.completed).map(todo => ({ id: todo.id, title: todo.title })));
        break;
      case '4':
        setFilteredTodos(todos.filter(todo => todo.completed).map(todo => ({ id: todo.id, title: todo.title })));
        break;
      case '5':
        setFilteredTodos(todos.map(todo => ({ id: todo.id, userId: todo.userId })));
        break;
      case '6':
        setFilteredTodos(todos.filter(todo => !todo.completed).map(todo => ({ id: todo.id, userId: todo.userId })));
        break;
      case '7':
        setFilteredTodos(todos.filter(todo => todo.completed).map(todo => ({ id: todo.id, userId: todo.userId })));
        break;
      default:
        setFilteredTodos([]);
    }
    setSelectedOption(option);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Menu</Text>
      <Text>Seleccione una opción:</Text>
      <View style={styles.optionsContainer}>
        {[1, 2, 3, 4, 5, 6, 7].map(option => (
          <TouchableOpacity
            key={option}
            style={[
              styles.optionButton,
              selectedOption === option && styles.selectedOptionButton
            ]}
            onPress={() => displayTodos(option.toString())}
          >
            <Text style={styles.optionText}>Opción {option}</Text>
          </TouchableOpacity>
        ))}
      </View>
      {filteredTodos.length > 0 && (
        <View>
          <Text>Resultados:</Text>
          {filteredTodos.map((todo, index) => (
            <Text key={index}>{JSON.stringify(todo)}</Text>
          ))}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  optionsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
  },
  optionButton: {
    padding: 10,
    margin: 5,
    backgroundColor: '#f0f0f0',
    borderRadius: 5,
  },
  selectedOptionButton: {
    backgroundColor: 'lightblue',
  },
  optionText: {
    fontSize: 18,
  },
});

export default Menu;
