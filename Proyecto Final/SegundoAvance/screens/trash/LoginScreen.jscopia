import React, { useState } from 'react';
import {
  StatusBar,
  Alert,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
} from 'react-native';
import Svg, { Path } from 'react-native-svg';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const { width } = Dimensions.get('window');

export default function App() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  /*const handleLogin = async () => {
    if (!username || !password) {
      Alert.alert('Error', 'Please enter an email and password.');
      return;
    }

    try {
      const response = await axios.post('http://127.0.0.1:80/apiMachine/login.php', {
        email: username,
        password: password,
      });
      if (response.status === 200) {
        console.log('Login successful.');
        await AsyncStorage.setItem('userToken', response.data.token);
        // Navigate to Home Screen
        <HomeScreen/>
      } else {
        Alert.alert('Login Failed', 'The provided credentials do not match our records.');
      }
    } catch (error) {
      console.log('Login error:', error);
      Alert.alert('Login Error', 'An error occurred while attempting to login.');
    }
  };*/

  /*const handleLogin = async () => {
    if (!username || !password) {
        Alert.alert('Error', 'Por favor, ingresa un correo electrónico y una contraseña.');
        return;
    }

    try {
        const response = await axios.post('http://127.0.0.1:80/apiMachine/login.php', {
          
            correo: username,
            contrasena: password
        });
        if (response.status >= 200 && response.status < 300) {
            console.log('La solicitud POST fue exitosa.');
            console.log('Respuesta del servidor:', response.data);
            navigation.navigate('Home');

            await AsyncStorage.setItem('username', username);
            await AsyncStorage.setItem('password', password);
            navigation.navigate('Home');

        } else {
            console.log('La solicitud POST fue exitosa, pero el servidor devolvió un código de estado inesperado:', response.status);
            Alert.alert('Error', 'Ha ocurrido un error al intentar iniciar sesión.');
        }
        } catch (error) {
            console.error('Error al realizar la solicitud POST:', error);
            Alert.alert('Error', 'Ha ocurrido un error al intentar iniciar sesión. Por favor, intenta de nuevo más tarde.');
      }

    
  };*/

  /*const handleLogin = async () => {
    try {
      const response = await axios.post('http://127.0.0.1:80/apiMachine/login.php', { username, password });
      await AsyncStorage.setItem('jwtToken', response.data.token);
      navigation.navigate('Home');
    } catch (error) {
      alert('Arrr matey! No treasure found. (Invalid credentials)');
    }
  };*/

  // Suponiendo que esta es tu función de inicio de sesión
  const handleLogin = async () => {
    try {
      const response = await axios.post('http://127.0.0.1:80/apiMachine/login.php', { correo: username, contrasena: password });
      if (response.data.mensaje === "Inicio de sesión exitoso") {
        // Aquí almacenas la bandera de inicio de sesión en lugar del JWT token
        await AsyncStorage.setItem('isLoggedIn', 'true');
        navigation.navigate('Home');
      } else {
        alert('Inicio de sesión fallido. Por favor verifica tus credenciales.');
      }
    } catch (error) {
      alert('Error al intentar iniciar sesión. Por favor intenta de nuevo.');
    }
  };

  

  

  return (
    <View style={styles.mainContainer}>
      <StatusBar style="auto" />
      <View style={styles.svgContainer}>
        <Svg width="100%" height="150" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          {/* Insert your SVG XML here */}
          <Path d="M50 0L61.8034 15H38.1966L50 0Z" fill="#6FCF97" />
          {/* This is just a sample Path, replace with your actual SVG content */}
        </Svg>
      </View>
      <View style={styles.loginContainer}>
        <TextInput
          placeholder="Email"
          style={styles.input}
          onChangeText={setUsername}
          value={username}
          keyboardType="email-address"
          autoCapitalize="none"
        />
        <TextInput
          placeholder="Password"
          style={styles.input}
          onChangeText={setPassword}
          value={password}
          secureTextEntry={true}
        />
        <TouchableOpacity onPress={handleLogin} style={styles.loginButton}>
          <Text style={styles.loginButtonText}>Log In</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
    backgroundColor: '#f1f1f1',
  },
  svgContainer: {
    alignItems: 'center',
    marginTop: 50,
  },
  loginContainer: {
    marginTop: 50,
    alignItems: 'center',
  },
  input: {
    width: '80%',
    height: 50,
    backgroundColor: '#fff',
    borderRadius: 25,
    padding: 15,
    marginBottom: 20,
    fontSize: 16,
  },
  loginButton: {
    width: '80%',
    height: 50,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 25,
  },
  loginButtonText: {
    color: '#fff',
    fontSize: 18,
  },
});
